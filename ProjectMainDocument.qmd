---
1--
title: "Project Main Document"
format: html
editor: visual
---

## Data Analytics Group Project

Group Members: Zack, Mustapha, Kerim, Chris

## Heart Failure Prediction

#### **Description of Data set:**

This data set contains information on people with cardiovascular disease, including age and health conditions. The purpose of the data set is to be used to create a predictive model to help those who are at risk or have cardiovascular disease prevent heart failure through early detection. This data set has 13 attributes that can be used to predict mortality by heart failure.

#### **Cleaning the Data:**

```{r}
library(tidyverse)
library("dplyr")

heart <- read.csv("heart_failure_clinical_records_dataset.csv")

heart

```

Check for missing values:

```{r}
mean(heart$age)
mean(heart$anaemia)
mean(heart$creatinine_phosphokinase)
mean(heart$diabetes)
mean(heart$ejection_fraction)
mean(heart$high_blood_pressure)
mean(heart$platelets)
mean(heart$serum_creatinine)
mean(heart$serum_sodium)
mean(heart$sex)
mean(heart$smoking)
mean(heart$time)
mean(heart$DEATH_EVENT)

mean(heart$serum_creatinine <= 2)
```

This means that there are no missing values in the data set, because if there were missing values, then the mean would result in a value of NA for the given attribute.

Check for outliers:

```{r}
boxplot(heart$age)
boxplot(heart$creatinine_phosphokinase)
boxplot(heart$ejection_fraction)
boxplot(heart$platelets)
boxplot(heart$serum_creatinine)
boxplot(heart$serum_sodium)
boxplot(heart$time)
```

While there are several outliers in some of the attributes, I would not make sense to remove them from the data set. This is because there is a large quantity of outliers, and removing them would have a significant effect on the total amount of data in the data set. The example below shows how removing the outliers can affect the data.

```{r}
mean(heart$serum_creatinine)

no_outlier_data <- heart[-which(heart$creatinine_phosphokinase==3964),]

mean(no_outlier_data$serum_creatinine)
```

```{r}
#(heart$creatinine_phosphokinase)
#(heart$platelets)
#heart$serum_creatinine)
#heart$serum_sodium)
  
ggplot(heart, aes(x = creatinine_phosphokinase, y = platelets)) +
  geom_point()

ggplot(heart, aes(x = creatinine_phosphokinase, y = serum_creatinine)) +
  geom_point()

ggplot(heart, aes(x = creatinine_phosphokinase, y = serum_sodium)) +
  geom_point()

ggplot(heart, aes(x = serum_creatinine, y = platelets)) +
  geom_point()

ggplot(heart, aes(x = serum_sodium, y = platelets)) +
  geom_point()

ggplot(heart, aes(x = serum_creatinine, y = serum_sodium)) +
  geom_point()
```

By looking at the graphs of the continuous variables, we can identify any outlier samples that are outliers in more than one attribute. In this data set, almost all of the samples with an outlier have only one outlier, with only one sample with outliers in both creatinine phosphokinase and serum creatinine, which could be removed. To determine if the values should be removed, we need to look at the plausible ranges for the different attriibutes.

-   Age: Ranges from 40 to 95 years, which seems plausible for a heart failure clinical records dataset.

-   Creatinine Phosphokinase: Has a wide range (23 to 7861), with a large standard deviation, indicating significant variability. The maximum value is notably high, which may be worth investigating further.

-   Ejection Fraction: Ranges from 14% to 80%, which covers the expected range for this clinical measure, though the upper range is quite high.

-   Platelets: The count ranges widely from 25100 to 850000, with a standard deviation that suggests variability but within a plausible range.

-   Serum Creatinine: Ranges from 0.5 to 9.4, with the higher end being concerning and indicative of severe renal dysfunction, which is plausible in the context of heart failure but could be considered an outlier.

-   Serum Sodium: Ranges from 113 to 148, with values mostly concentrating around the normal range, though the extremes indicate potential clinical concerns or measurement errors.

-   Sex, Smoking, Diabetes, Anaemia, High Blood Pressure, and DEATH_EVENT: Are binary variables coded as 0 or 1, with their distributions looking plausible for clinical data.

-   Time: Represents the follow-up period in days, with a range from 4 to 285.

Looking at these value ranges, we can see that these values are not outside of the plausible range for each attribute, so none of the values are errors. These high values are physically possible and can help us to determine why the person might have suffered heart failure.

```{r}
ggplot(heart, aes(x = age)) +
  geom_bar()
ggplot(heart, aes(x = anaemia)) +
  geom_bar()
ggplot(heart, aes(x = age, y = creatinine_phosphokinase)) +
  geom_point()
ggplot(heart, aes(x = diabetes)) +
  geom_bar()
ggplot(heart, aes(x = age, y = ejection_fraction)) +
  geom_point()
ggplot(heart, aes(x = high_blood_pressure)) +
  geom_bar()
ggplot(heart, aes(x = age, y = platelets)) +
  geom_point()
ggplot(heart, aes(x = age, y = serum_creatinine)) +
  geom_point()
ggplot(heart, aes(x = age, y = serum_sodium)) +
  geom_point()
ggplot(heart, aes(x = sex)) +
  geom_bar()
ggplot(heart, aes(x = DEATH_EVENT)) +
  geom_bar()
```

## **Analysis of Attributes:**

### Variation Analysis:

#### Age

```{r}
age_summ <- heart |>
  summarise(Mean = mean(age, na.rm = TRUE),
    Median = median(age, na.rm = TRUE),
    Standard_Deviation = sd(age, na.rm = TRUE),
    IQR = IQR(age, na.rm = TRUE))

print(age_summ)

ggplot(heart, aes(x = age)) +
  geom_histogram(binwidth = 1) +
  labs(title = "Distribution of Age", x = "Age", y = "Count")

ggplot(heart, aes(y = age)) +
  geom_boxplot() +
  labs(title = "Boxplot of Age", y = "Age")

```

The mean and the median values for age are about 60 years old. The values somewhat follow a normal distribution around 60, with most values being between 50 and 70 and fewer samples at 40 and 80 and some outliers around 90. This distribution makes sense because people with heart disease are more likely to have a heart failure relatively earlier in their life and a shorter overall life expectancy.

#### Creatinine Phosphokinase

```{r}
creatinine_phosphokinase_summ <- heart |>
  summarise(Mean = mean(creatinine_phosphokinase, na.rm = TRUE),
    Median = median(creatinine_phosphokinase, na.rm = TRUE),
    Standard_Deviation = sd(creatinine_phosphokinase, na.rm = TRUE),
    IQR = IQR(creatinine_phosphokinase, na.rm = TRUE))

print(creatinine_phosphokinase_summ)

ggplot(heart, aes(x = creatinine_phosphokinase)) +
  geom_histogram(binwidth = 100) +
  labs(title = "Distribution of Creatinine Phosphokinase", x = "Creatinine Phosphokinase", y = "Count")

variance_cpk <- var(heart$creatinine_phosphokinase)

ggplot(heart, aes(x = creatinine_phosphokinase)) +
  geom_boxplot(fill = "skyblue", width = 0.7) +
  coord_flip() +
  labs(title = "Boxplot of Creatinine Phosphokinase",
       y = "creatinine_phosphokinase") +
  theme(axis.title.y = element_blank())  

print(variance_cpk)
```

The high coefficient of variation indicates that the creatinine phosphokinase levels vary widely among the patients in this dataset. This wide variation suggests that the levels can be extremely variable from one patient to another, which could be due to individual differences or varying severities of heart conditions.

#### Ejection Fraction

```{r}
ejection_fraction_summ <- heart |>
  summarise(Mean = mean(ejection_fraction, na.rm = TRUE),
    Median = median(ejection_fraction, na.rm = TRUE),
    Standard_Deviation = sd(ejection_fraction, na.rm = TRUE),
    IQR = IQR(ejection_fraction, na.rm = TRUE))

print(ejection_fraction_summ)

ggplot(heart, aes(x = ejection_fraction)) +
  geom_histogram(binwidth = 1) +
  labs(title = "Distribution of Ejection Fraction", x = "Ejection Fraction", y = "Count")

variance_ef <- var(heart$ejection_fraction)

ggplot(heart, aes(x = ejection_fraction)) +
  geom_boxplot(fill = "skyblue", width = 0.7) +
  coord_flip() +  # Flip coordinates to make boxplot horizontal
  labs(title = "Boxplot of Ejection Fraction",
       y = "Ejection Fraction (%)") +
  theme(axis.title.y = element_blank())  
print(variance_ef)

```

The moderate coefficient of variation for ejection fraction suggests that while there is some variability in how well the heart pumps blood with each beat, it is less varied compared to creatinine phosphokinase. This might reflect a somewhat consistent measure of heart function among patients with heart failure.

#### Platelets

```{r}
platelets_summ <- heart |>
  summarise(Mean = mean(platelets, na.rm = TRUE),
    Median = median(platelets, na.rm = TRUE),
    Standard_Deviation = sd(platelets, na.rm = TRUE),
    IQR = IQR(platelets, na.rm = TRUE))

print(platelets_summ)

#summary(heart$platelets) 
ggplot(heart, aes(x = platelets)) + geom_histogram(binwidth = 10000) + labs(title = "Distribution of Platelet Levels") 

ggplot(heart, aes(y = platelets)) +
  geom_boxplot() +
  labs(title = "Boxplot of Platelets", y = "Platelets")

```

The x-axis represents the platelet count, divided into bins, and the y-axis represents the count of observations within each bin. The histogram shows a multimodal distribution, with the most prominent peak around 250,000 platelets. There are smaller peaks observed at lower and higher platelet counts. The distribution has a long tail extending towards higher platelet counts, indicating some higher values in the dataset, though these are less frequent.

#### Serum Creatinine

```{r}
serum_creatinine_summ <- heart |>
  summarise(Mean = mean(serum_creatinine, na.rm = TRUE),
    Median = median(serum_creatinine, na.rm = TRUE),
    Standard_Deviation = sd(serum_creatinine, na.rm = TRUE),
    IQR = IQR(serum_creatinine, na.rm = TRUE))

print(serum_creatinine_summ)

#summary(heart$serum_creatinine) 
ggplot(heart, aes(x = serum_creatinine)) + geom_histogram(binwidth = 0.1) + labs(title = "Distribution of Serum Creatinine Levels") 

ggplot(heart, aes(y = serum_creatinine)) +
  geom_boxplot() +
  labs(title = "Boxplot of Serum Creatinine", y = "Serum Creatinine")

```

This is a histogram that shows the frequency distribution of serum creatinine levels among a sample population.The x-axis is labeled "serum_creatinine" and ranges from 0 to 7.5, indicating the serum creatinine levels in mg/dL.The y-axis is labeled "count" and shows the number of occurrences for each serum creatinine level.The histogram peaks around 1.0 mg/dL, suggesting that this is the most common serum creatinine level in the sample. The distribution is right-skewed, indicating that higher creatinine levels are less common but extend to about 7.5 mg/dL.

#### Serum Sodium

```{r}

serum_sodium_summary <- heart %>%

  summarise(

    Mean = mean(serum_sodium, na.rm = TRUE),

    Median = median(serum_sodium, na.rm = TRUE),

    Standard_Deviation = sd(serum_sodium, na.rm = TRUE),

    IQR = IQR(serum_sodium, na.rm = TRUE)

  )

print(serum_sodium_summary)

ggplot(heart, aes(x = serum_sodium)) +

  geom_histogram(binwidth = 1, fill = "blue", color = "black") +

  labs(title = "Distribution of Serum Sodium Levels", x = "Serum Sodium", y = "Count")

ggplot(heart, aes(y = serum_sodium)) +

  geom_boxplot(fill = "lightblue", color = "black") +

  labs(title = "Boxplot of Serum Sodium Levels", y = "Serum Sodium")
```

1.  Boxplot of Serum Sodium Levels: The boxplot indicates that the median serum sodium level is around 135 mEq/L, which is within normal serum sodium ranges, but there are several outliers on the lower side indicating patients with hyponatremia.

2.  Distribution of Serum Sodium Levels: This histogram shows a left-skewed distribution, suggesting that a lower serum sodium level is less common but present in the patient population, which can be critical in heart failure management.

#### Time

```{r}

time_summary <- heart %>%

  summarise(

    Mean = mean(time, na.rm = TRUE),

    Median = median(time, na.rm = TRUE),

    Standard_Deviation = sd(time, na.rm = TRUE),

    IQR = IQR(time, na.rm = TRUE)

  )

print(time_summary)

ggplot(heart, aes(x = time)) +

  geom_histogram(binwidth = 10, fill = "green", color = "black") +

  labs(title = "Distribution of Time", x = "Time", y = "Count")

ggplot(heart, aes(y = time)) +

  geom_boxplot(fill = "lightgreen", color = "black") +

  labs(title = "Boxplot of Time", y = "Time")


```

1.  Distribution of Time: This histogram displays the follow-up period 'time' with a varied distribution, indicating that the follow-up times were not uniform across patients, which might affect longitudinal analyses.

2.  Summary Statistics: The mean serum sodium is higher than the median, confirming the skewness seen in the histogram. The interquartile range (IQR) is 130 mEq/L, indicating a moderate spread in serum sodium levels among patients.

### Covariation Analysis:

##### Serum Creatinine vs Serum Sodium

Serum Creatinine and Serum Sodium have a slight negative correlation, where as serum sodium increases, serum creatinine tends to decrease. The p-value for this correlation is less than 0.5, which means the correlation between serum creatinine and serum sodium is significant.

##### Serum Creatinine vs Time

Serum Creatinine and Time have a negative correlation, where as serum creatinine increase, the time, which is the number of days in the follow up period, decreases. The p-value for this correlation is less than 0.5, which means the correlation between serum creatinine and time is significant.

##### Serum Sodium vs Time

The regression for Serum Sodium and Time shows a positive trend, where as serum sodium increases, the number of days in the follow up period also increases. However, the p-value is greater than 0.5, which means we accept the null hypothesis, which is that there is no significant correlation between serum sodium and time.

```{r}
cor_sc_ss <- cor.test(heart$serum_creatinine, heart$serum_sodium)
cor_sc_t <- cor.test(heart$serum_creatinine, heart$time)
cor_ss_t <- cor.test(heart$serum_sodium, heart$time)

print(paste("Correlation between serum_creatinine and serum_sodium:"))
cor_sc_ss
print(paste("Correlation between serum_creatinine and time:"))
cor_sc_t
print(paste("Correlation between platelets and serum_sodium:"))
cor_ss_t


ggplot(heart, aes(x = serum_creatinine, y = serum_sodium)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(title = "Serum Creatinine vs Serum Sodium")

ggplot(heart, aes(x = serum_creatinine, y = time)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(title = "Serum Creatinine vs Time")

ggplot(heart, aes(x = serum_sodium, y = time)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, color = "red" ) +
  labs(title = "Serum Sodium vs Time")
```

##### Creatinine Phosphokinase vs Ejection Fraction

There is a very weak negative correlation between creatinine phosphokinase levels and ejection fraction. This suggests that there is no significant linear relationship between these variables.

##### Creatinine Phosphokinase vs Platelets

The correlation is very weakly positive, indicating that there is essentially no meaningful linear relationship between creatinine phosphokinase levels and platelet counts.

##### Creatinine Phosphokinase vs Serum Creatinine

This very weak negative correlation suggests that changes in creatinine phosphokinase levels do not reliably predict changes in serum creatinine levels.

##### Creatinine Phosphokinase vs Serum Sodium

A weak positive correlation is observed here, but it is not strong enough to indicate a significant linear relationship. Variations in creatinine phosphokinase seem to have little effect on serum sodium levels.

```{r}
cor_cpk_ef <- cor.test(heart$creatinine_phosphokinase, heart$ejection_fraction)
cor_cpk_p <- cor.test(heart$creatinine_phosphokinase, heart$platelets)
cor_cpk_sc <- cor.test(heart$creatinine_phosphokinase, heart$serum_creatinine)
cor_cpk_ss <- cor.test(heart$creatinine_phosphokinase, heart$serum_sodium)

print(paste("Correlation between creatinine_phosphokinase and ejection_fraction:"))
cor_cpk_ef
print(paste("Correlation between creatinine_phosphokinase and platelets:")) 
cor_cpk_p
print(paste("Correlation between creatinine_phosphokinase and serum_creatinine:")) 
cor_cpk_sc
print(paste("Correlation between creatinine_phosphokinase and serum_sodium:")) 
cor_cpk_ss

p1 <- ggplot(heart, aes(x=creatinine_phosphokinase, y=ejection_fraction)) +
  geom_point() +
  geom_smooth(method="lm", se = FALSE, color="red") +
  labs(title="Scatter Plot\nCreatinine Phosphokinase vs Ejection Fraction",
       x="Creatinine Phosphokinase (units/L)", y="Ejection Fraction (%)")

p2 <- ggplot(heart, aes(x=creatinine_phosphokinase, y=platelets)) +
  geom_point() +
  geom_smooth(method="lm", se = FALSE, color="red") +
  labs(title="Scatter Plot\nCreatinine Phosphokinase vs Platelets",
       x="Creatinine Phosphokinase (units/L)", y="Platelets (%)")

p3 <- ggplot(heart, aes(x=creatinine_phosphokinase, y=serum_creatinine)) +
  geom_point() +
  geom_smooth(method="lm", se = FALSE, color="red") +
  labs(title="Scatter Plot\nCreatinine Phosphokinase vs Serum Creatinine",
       x="Creatinine Phosphokinase (units/L)", y="Serum Creatinine (%)")

p4 <- ggplot(heart, aes(x=creatinine_phosphokinase, y=serum_sodium)) +
  geom_point() +
  geom_smooth(method="lm", se = FALSE, color="red") +
  labs(title="Scatter Plot\nCreatinine Phosphokinase vs Serum Sodium",
       x="Creatinine Phosphokinase (units/L)", y="Serum Sodium (%)")

print(p1)
print(p2)
print(p3)
print(p4)
```

##### Creatinine Phosphokinase vs Time

The image displays a scatter plot titled "Creatinine Phosphokinase vs Time". The x-axis, labeled "Time", appears to be measured in days, although the units are not explicitly stated. The y-axis is labeled "Creatinine Phosphokinase" and is measured in units (presumably U/L, a common unit for enzyme activity).The majority of the data points are clustered near the lower part of the y-axis, suggesting that most of the Creatinine Phosphokinase measurements are relatively low.There are several outliers with significantly higher Creatinine Phosphokinase values, some reaching up to 8000 U/L. A red trend line is drawn across the plot, which appears to be relatively flat, indicating that there is no strong  trend of increasing or decreasing Creatinine Phosphokinase levels over time

##### Ejection Fraction vs Platelets

The image displays a scatter plot titled "Ejection Fraction vs Platelets." This plot is used to visualize the relationship between the ejection fraction of the heart and the platelet count in the blood. The X Represents the platelet count, ranging from 0 to approximately 800,000. The Y Represents the ejection fraction, ranging from approximately 20% to 80%. The scatter plot consists of numerous black dots, each representing an individual data point correlating a specific platelet count to an ejection fraction value. A red line is drawn across the plot, indicating a trend line. This line appears to be relatively flat, suggesting that there might be a weak or no significant linear relationship between platelet count and ejection fraction based on the data presented.

##### Ejection Fraction vs Serum Creatinine

The image displays a scatter plot titled "Ejection Fraction vs Serum Creatinine." The x-axis represents serum creatinine levels, ranging from approximately 0.5 to 9.0 mg/dL, while the y-axis represents ejection fraction percentages, ranging from about 20% to 80%. The plot is populated with numerous data points, indicating individual measurements of ejection fraction at corresponding serum creatinine levels. A red line is drawn across the plot, which appears to be a trend line, although it is relatively flat, suggesting a weak or no significant correlation between serum creatinine levels and ejection fraction percentages based on the visual representation. 

##### Ejection Fraction vs Serum Sodium

The image displays a scatter plot titled "Ejection Fraction vs Serum Sodium." The x-axis is labeled "Serum Sodium" and ranges from 120 to 145. The y-axis is labeled "Ejection Fraction" and ranges from about 20 to 80. The plot contains numerous black data points scattered across the graph, indicating individual observations of serum sodium levels and their corresponding ejection fraction percentages. A red line is also present on the graph, representing a trend line (possibly a linear regression line) that suggests a positive correlation between serum sodium levels and ejection fraction. This implies that as serum sodium levels increase, there is a general increase in ejection fraction percentages.

```{r}
cor_cpk_t <- cor.test(heart$creatinine_phosphokinase, heart$time)
cor_ef_p <- cor.test(heart$ejection_fraction, heart$platelets)
cor_ef_sc <- cor.test(heart$ejection_fraction, heart$serum_creatinine)
cor_ef_ss <- cor.test(heart$ejection_fraction, heart$serum_sodium)

print(paste("Correlation between creatinine_phosphokinase and time:"))
cor_cpk_t
print(paste("Correlation between ejection_fraction and platelets:"))
cor_ef_p
print(paste("Correlation between ejection_fraction and serum_creatinine:"))
cor_ef_sc
print(paste("Correlation between ejection_fraction and serum_sodium:"))
cor_ef_ss

# Scatter plot of Creatinine Phosphokinase vs Time 
ggplot(heart, aes(x = time, y = creatinine_phosphokinase)) + 
  geom_point() + 
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(x = "Time", y = "Creatinine Phosphokinase", title = "Creatinine Phosphokinase vs Time") 
 
 
# Scatter plot of Ejection Fraction vs Platelets 
ggplot(heart, aes(x = platelets, y = ejection_fraction)) + 
  geom_point() + 
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(x = "Platelets", y = "Ejection Fraction", title = "Ejection Fraction vs Platelets") 
 
# Scatter plot of Ejection Fraction vs Serum Creatinine 
ggplot(heart, aes(x = serum_creatinine, y = ejection_fraction)) + 
  geom_point() + 
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(x = "Serum Creatinine", y = "Ejection Fraction", title = "Ejection Fraction vs Serum Creatinine") 
 
# Scatter plot of Ejection Fraction vs Serum Sodium 
ggplot(heart, aes(x = serum_sodium, y = ejection_fraction)) + 
  geom_point() + 
  geom_smooth(method = "lm", se = FALSE, color = "red") +
  labs(x = "Serum Sodium", y = "Ejection Fraction", title = "Ejection Fraction vs Serum Sodium") 

```

##### Ejection Fraction vs Time

Scatter plot of Ejection Fraction vs Time: The scatter plot with a slightly upward trend suggests a very weak positive correlation, meaning higher ejection fractions might be associated with longer follow-up times.

##### Platelets vs Serum Creatinine

Scatter plot of Platelets vs Serum Creatinine: The relatively flat fitted line suggests no significant linear relationship between platelet count and serum creatinine levels.

##### Platelets vs Serum Sodium

Scatter plot of Platelets vs Serum Sodium: The plot shows a weak upward trend, hinting at a weak positive relationship between platelets and serum sodium.

##### Platelets vs Time

Scatter plot of Platelets vs Time: The flat trend line suggests no clear linear relationship between platelets and follow-up time.

```{r}

cor_ejection_fraction_time <- cor.test(heart$ejection_fraction, heart$time, use = "complete.obs")

cor_platelets_serum_creatinine <- cor.test(heart$platelets, heart$serum_creatinine, use = "complete.obs")

cor_platelets_serum_sodium <- cor.test(heart$platelets, heart$serum_sodium, use = "complete.obs")

cor_platelets_time <- cor.test(heart$platelets, heart$time, use = "complete.obs")

print(paste("Correlation between ejection_fraction and time:"))
cor_ejection_fraction_time

print(paste("Correlation between platelets and serum_creatinine:")) 
cor_platelets_serum_creatinine

print(paste("Correlation between platelets and serum_sodium:")) 
cor_platelets_serum_sodium

print(paste("Correlation between platelets and time:")) 
cor_platelets_time

ggplot(heart, aes(x = ejection_fraction, y = time)) +

  geom_point() +

  geom_smooth(method = "lm", se = FALSE, color = "blue") +

  labs(title = "Scatter plot of Ejection Fraction vs Time")

ggplot(heart, aes(x = platelets, y = serum_creatinine)) +

  geom_point() +

  geom_smooth(method = "lm", se = FALSE, color = "red") +

  labs(title = "Scatter plot of Platelets vs Serum Creatinine")

ggplot(heart, aes(x = platelets, y = serum_sodium)) +

  geom_point() +

  geom_smooth(method = "lm", se = FALSE, color = "green" ) +

  labs(title = "Scatter plot of Platelets vs Serum Sodium")

ggplot(heart, aes(x = platelets, y = time)) +

  geom_point() +

  geom_smooth(method = "lm", se = FALSE, color = "orange") +

  labs(title = "Scatter plot of Platelets vs Time")
```

## Research Questions:

1.  **Can we predict which patients are likely to have a serum sodium level below the normal range based on their ejection fraction and time of follow-up?**

    We could use Linear regression , if serum creatinine levels are treated as a continuous dependent variable and multiple regression if there are non linear relationships

2.  **Is it possible to model serum creatinine levels as a function of platelet count and time since the last follow-up?**

    Logistic regression for binary outcome

3.  **How does the ejection fraction correlate with serum sodium levels among patients with heart failure?**

    We can use Visualization to see the relationship between ejection fraction and serum sodium level using the scatter plots charts.

4.  **Can we classify patients into low, medium, and high risk for heart complications based on their platelet count and ejection fraction?**

    This is a classification question. We can use a logistic regression model with platelet count and ejection fraction as the independent variables and death event as the dependent variable. We can separate into risk categories by dividing the test samples into three categories based on the predicted probabilities.

    ```{r}
    train_indices <- sample(1:nrow(heart), 0.7 * nrow(heart)) 
    test_indices <- setdiff(1:nrow(heart), train_indices)  
    train_data <- heart[train_indices, ]
    test_data <- heart[test_indices, ]

    model <- glm(DEATH_EVENT ~ platelets + ejection_fraction, data = train_data, family = binomial)

    prediction <- predict(model, newdata = test_data, type = "response")

    low <- 0.33
    medium <- 0.66

    risk_category <- ifelse(prediction < low, "Low", 
                             ifelse(prediction < medium, "Medium", 
                                    ifelse(prediction > medium, "High", "")))

    risk_data <- data.frame(platelets = test_data$platelets, ejection_fraction = test_data$ejection_fraction, risk_category = risk_category)

    risk_data
    ```

    As seen above, we can use platelet count and ejection fraction to assign a risk category for each sample in the data set. We can see that in the test data set, most of the samples fall in the low or medium risk categories. This could potentially be caused by the test data being a smaller section of the whole data set.

5.  **Does the presence of diabetes modify the relationship between ejection fraction and time of follow-up?**

    We can use a linear regression model and mutation to answer this question. This is because we can mutate a value that is a ratio of ejection fraction and time and use that in a linear regression model with diabetes to see the relationship between the attributes.

    ```{r}
    ef_t_ratio_data <- mutate(heart, ef_t_ratio = heart$ejection_fraction / heart$time)
    model <- lm(ef_t_ratio ~ diabetes, data = ef_t_ratio_data)
    summary(model)
    ```

    We can see that the affect of diabetes on the relationship between ejection fraction and follow up time is not significant, because the p-value of the model is greater than 0.05, which means we accept the null hypothesis, which is that there is no relation.

6.  **What is the best predictor of follow-up time in heart failure patients among the available biochemical parameters?**

    If we want to predict follow-up time, we can create a prediction model using a multiple regression model of the different attributes. We would need to create the model and use a portion of the data set to train.

7.  **Is there a significant interaction effect between diabetes status and smoking on serum sodium levels?**

    Because we have two different independent variables in this question, we should use a multiple regression model to analyze the relationships between the variables.

    ```{r}
    model <- lm(serum_sodium ~ diabetes * smoking, data = heart)
    summary(model)
    ```

    To answer the above question, we can look at the p-values of the independent variables in the model. If the p-value is less than 0.05, then there is a significant relationship between the variables. In this case, the p-values for diabetes and smoking are both above 0.05. This means we accept the null hypothesis, which states that there is no significant relationship between diabetes or smoking on serum sodium levels.

8.  **What are the primary factors associated with abnormal serum sodium levels in heart failure patients?**

    Multiple Linear Regression or Logistic Regression this is because multiple linear regression can help identify how various factors together influence serum sodium levels as a continuous outcome, logistic regression is appropriate for identifying the likelihood of having abnormal serum sodium levels associated with predictors.

9.  **Is there a relation between smoking and creatinine phosphokinase, serum creatine, and serum sodium levels?**

    We can use Cluster analysis to help us to identify subgroups of heart failure patients with similar CPK levels and survival rates. This might reveal clusters with different survival patterns.

10. **What are the healthy ranges of the attributes?**

    Logistic Regression this is because this analysis looks at a binary outcome (death yes/no) and logistic regression is suitable for modeling the probability of death as a function of smoking status (smoker/non-smoker), possibly controlling for other variables.

11. **How are the rates of death from heart failure and smoking related?**

    Multivariate Analysis of Variance or Multiple Linear Regression. If looking at the relationship between smoking and these three continuous variables simultaneously, we can determine if the mean vectors of these measurements differ between smokers and non-smokers. Multiple linear regression could be used if we are focusing on the influence of smoking on each measure separately.

12. **How does Creatinine Phosphokinase affect the rate of survival of heart failure?**

    Logistic Regression with Model Comparison this is because logistic regression is ideal for modeling binary outcomes based on multiple predictors. To determine the greatest effect, we could compare the standardized coefficients of different attributes or use a model selection technique.

13. **Are there specific subgroups within the population that are at higher risk of developing heart failure?**

    Cluster Analysis or Decision Trees, this is because cluster analysis could identify distinct subgroups within the population based on similarities in their characteristics. Decision trees can be used to create a model that predicts the risk of heart failure, providing a clear path of decision nodes that highlight risk factors and their thresholds.

14. **What is the distribution of age among patients who experienced a heart failure death event?**

    This question can be answered using visualization to view the distribution of ages for patients who died from heart failure.

    ```{r}
    ggplot(heart, aes(x = age)) +
      geom_histogram(binwidth = 1) +
      facet_wrap(~ DEATH_EVENT) +
      labs(title = "Distribution of Age", x = "Age", y = "Count")

    ```

    By using the facet feature to separate the graph for age based on death event, we can see the distribution of ages for those who lived and died from heart failure. The graph of samples who survived is much more concentrated to the left of the graph as compared to the graph of samples who died. The graph of samples who died has a much greater number of samples in the higher ages, which tells us that people who are older are much less likely to survive heart failure than people who are younger.

15. **How does anaemia affect the mortality rate in heart failure patients?**

    To answer this question, we will the Chi-Square test to determine if there is a significant relationship between anaemia and mortality rate. If there is, we will use a logistic regression model. This is because we have two categorical variables and we want to see the relationship between them.

    ```{r}
    chi_square_test <- chisq.test(table(heart$anaemia, heart$DEATH_EVENT))
    print(chi_square_test)
    ```

    Based on the p-value in the Chi-Square test, which is less than 0.05, we must accept the null hypothesis and conclude that there is no significant relationship between anaemia and death by heart failure.

16. **Does having diabetes increase the risk of death in heart failure patients?**

    We can use a logistic regression model to see if diabetes has an effect on death rates from heart failure because both diabetes and DEATH_EVENT are categorical variables. But first we need to use the Chi-Square test to determine if there is a relationship between the two variables.

    ```{r}
    chi_square_test <- chisq.test(table(heart$diabetes, heart$DEATH_EVENT))
    print(chi_square_test)

    train_indices <- sample(1:nrow(heart), 0.7 * nrow(heart)) 
    test_indices <- setdiff(1:nrow(heart), train_indices)  
    train_data <- heart[train_indices, ]
    test_data <- heart[test_indices, ]

    model <- glm(DEATH_EVENT ~ serum_creatinine, data = train_data, family = binomial)

    prediction <- predict(model, newdata = test_data, type = "response")
    ```

    We can see that the p-value from the Chi-Square test is 1, which is much larger than 0.05. This means we accept the null hypothesis and conclude that there is no significant relation between having diabetes and dying from heart failure.

17. **What are the typical ejection fraction values in patients who survive vs. those who don't?**

    T-test, Since this is about comparing the means of a continuous variable (ejection fraction) between two groups (survivors vs. non-survivors), a t-test is appropriate.

18. **How does high blood pressure impact the survival rates of heart failure patients?**

19. **Are lower platelet counts associated with higher mortality in heart failure patients?**

    Use logistic regression to assess if lower platelet counts are associated with higher mortality, adjusting for other factors., Logistic regression is suitable if the outcome is binary

20. **What role does serum creatinine play in predicting heart failure outcomes?**

    Because this is a prediction problem, we can use a logistic regression model to predict the affect on mortality that serum creatinine has.

    ```{r}
    t_test <- t.test(heart$serum_creatinine ~ heart$DEATH_EVENT)
    print(t_test)

    train_indices <- sample(1:nrow(heart), 0.7 * nrow(heart)) 
    test_indices <- setdiff(1:nrow(heart), train_indices)  
    train_data <- heart[train_indices, ]
    test_data <- heart[test_indices, ]

    model <- glm(DEATH_EVENT ~ serum_creatinine, data = train_data, family = binomial)

    prediction <- predict(model, newdata = test_data, type = "response")

    predicted.classes <- ifelse(prediction > 0.5, "1", "0")
    print(paste("Accuracy: ", mean(predicted.classes == test_data$DEATH_EVENT)))
    ```

    Based on the above analysis, serum creatinine clearly plays a role in heart failure outcomes. The p-value of the t-test is near zero, so we reject the null hypothesis and accept the alternative hypothesis, which states that there is a significant relation between serum creatinine and death event. Then, using training data to create the model and test data to create the prediction model, we found the prediction model to have an accuracy of 72%, which is the affect on predicting heart failure outcomes that serum creatinine has.

21. **How does serum sodium concentration relate to heart failure mortality?**

    Analyze using logistic regression to see if lower sodium levels are associated with increased mortality risk., determining whether low serum sodium is associated with increased mortality risk has a binary outcome

22. **Does the gender or smoking status of a patient significantly influence heart failure outcomes?**

    Use multivariable regression model to assess impact
